targetScope = 'subscription'

// ------------------
//    PARAMETERS
// ------------------
@description('The name of the workload that is being deployed. Up to 10 characters long.')
@minLength(2)
@maxLength(10)
param workloadName string = 'aks-lza'

@description('The name of the environment (e.g. "dev", "test", "prod", "uat", "dr", "qa"). Up to 8 characters long.')
@maxLength(8)
param environment string = 'dev'

@description('The location where the resources will be created.')
param location string = deployment().location

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

@description('Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false.')
param deployZoneRedundantResources bool = true

// ------------------
// VARIABLES
// ------------------
var namingRules = json(loadTextContent('../../shared/bicep/naming/naming-rules.jsonc'))
var rgHubName = !empty(hubResourceGroupName)
  ? hubResourceGroupName
  : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-hub-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'
var rgSpokeName = !empty(spokeResourceGroupName)
  ? spokeResourceGroupName
  : '${namingRules.resourceTypeAbbreviations.resourceGroup}-${workloadName}-spoke-${environment}-${namingRules.regionAbbreviations[toLower(location)]}'

// ------------------
// PARAMETERS
// ------------------

// ------------------
// RESOURCES
// ------------------

@description('User-configured naming rules')
module naming '../../shared/bicep/naming/naming.module.bicep' = {
  scope: spokeResourceGroup
  name: take('02-sharedNamingDeployment-${deployment().name}', 64)
  params: {
    uniqueId: uniqueString(spokeResourceGroup.id)
    environment: environment
    workloadName: workloadName
    location: location
  }
}

// ------------------
// PARAMETERS - HUB
// ------------------

@description('The address prefixes to use for the virtual network.')
param vnetAddressPrefixes array

@description('Enable or disable the creation of the Azure Bastion.')
param enableBastion bool

@description('CIDR to use for the Azure Bastion subnet.')
param bastionSubnetAddressPrefix string

@description('CIDR to use for the gatewaySubnet.')
param gatewaySubnetAddressPrefix string

@description('CIDR to use for the azureFirewallSubnet.')
param azureFirewallSubnetAddressPrefix string

@description('CIDR to use for the AzureFirewallManagementSubnet, which is required by AzFW Basic.')
param azureFirewallSubnetManagementAddressPrefix string

@description('The size of the virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information.')
param vmSize string

@description('The username to use for the virtual machine.')
param vmAdminUsername string

@description('The password to use for the virtual machine.')
@secure()
param vmAdminPassword string

@description('Optional. The name of the hub resource group to create the resources in. If set, it overrides the name generated by the template.')
param hubResourceGroupName string = ''

@description('The SSH public key to use for the virtual machine.')
@secure()
param vmLinuxSshAuthorizedKeys string

@allowed(['linux', 'windows', 'none'])
param vmJumpboxOSType string = 'none'

@description('CIDR to use for the virtual machine subnet.')
param vmJumpBoxSubnetAddressPrefix string

@description('Deploy Azure Firewall.')
param deployFirewall bool

param applicationRuleCollections array
param networkRuleCollections array
param natRuleCollections array

// ------------------
// VARIABLES - HUB
// ------------------

// ------------------
// RESOURCES - HUB
// ------------------

resource hubResourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = {
  name: rgHubName
  location: location
  tags: tags
}

module hub 'modules/01-hub/deploy.hub.bicep' = {
  name: take('hub-${deployment().name}-deployment', 64)
  params: {
    location: location
    tags: tags
    hubResourceGroupName: rgHubName
    environment: environment
    workloadName: workloadName
    vnetAddressPrefixes: vnetAddressPrefixes
    enableBastion: enableBastion
    bastionSubnetAddressPrefix: bastionSubnetAddressPrefix
    azureFirewallSubnetAddressPrefix: azureFirewallSubnetAddressPrefix
    azureFirewallSubnetManagementAddressPrefix: azureFirewallSubnetManagementAddressPrefix
    gatewaySubnetAddressPrefix: gatewaySubnetAddressPrefix
    spokeInfraSubnetAddressPrefix: spokeInfraSubnetAddressPrefix
    applicationRuleCollections: applicationRuleCollections
    natRuleCollections: natRuleCollections
    networkRules: networkRuleCollections
    deployFirewall: deployFirewall
  }
}

// ------------------
// PARAMETERS - SPOKE
// ------------------

@description('Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template.')
param spokeResourceGroupName string = ''

@description('CIDR of the Spoke Virtual Network.')
param spokeVNetAddressPrefixes array

@description('CIDR of the Spoke Infrastructure Subnet.')
param spokeInfraSubnetAddressPrefix string

@description('CIDR of the Spoke Private Endpoints Subnet.')
param spokePrivateEndpointsSubnetAddressPrefix string

@description('CIDR of the Spoke Application Gateway Subnet.')
param spokeApplicationGatewaySubnetAddressPrefix string

param spokeAG4CSubnetAddressPrefix string

@description('Optional, default value is true. If true, Azure Policies will be deployed')
param deployAzurePolicies bool = true

// ------------------
// VARIABLES - SPOKE
// ------------------

// ------------------
// RESOURCES - SPOKE
// ------------------

resource spokeResourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = {
  name: rgSpokeName
  location: location
  tags: tags
}

module spoke 'modules/02-spoke/deploy.spoke.bicep' = {
  name: take('spoke-${deployment().name}-deployment', 64)
  params: {
    spokeResourceGroupName: spokeResourceGroup.name
    location: location
    tags: tags
    environment: environment
    workloadName: workloadName
    hubVNetId: hub.outputs.hubVNetId
    spokeAG4CSubnetAddressPrefix: spokeAG4CSubnetAddressPrefix
    spokeApplicationGatewaySubnetAddressPrefix: spokeApplicationGatewaySubnetAddressPrefix
    spokeInfraSubnetAddressPrefix: spokeInfraSubnetAddressPrefix
    spokePrivateEndpointsSubnetAddressPrefix: spokePrivateEndpointsSubnetAddressPrefix
    spokeVNetAddressPrefixes: spokeVNetAddressPrefixes
    networkApplianceIpAddress: hub.outputs.networkApplianceIpAddress
    vmSize: vmSize
    vmAdminUsername: vmAdminUsername
    vmAdminPassword: vmAdminPassword
    vmLinuxSshAuthorizedKeys: vmLinuxSshAuthorizedKeys
    vmJumpboxOSType: vmJumpboxOSType
    vmJumpBoxSubnetAddressPrefix: vmJumpBoxSubnetAddressPrefix
    deployAzurePolicies: deployAzurePolicies
  }
}

// ------------------
// PARAMETERS - SUPPORTING RESOURCES
// ------------------

@description('Enable or disable the createion of Application Insights.')
param enableApplicationInsights bool

@description('Deploy Azure Container Registry')
param deployAcr bool = false

@description('Optional, default value is false. If true, Azure Cache for Redis (Premium SKU), together with Private Endpoint and the relavant Private DNS Zone will be deployed')
param deployRedisCache bool = false

module appInsights 'br/public:avm/res/insights/component:0.3.0' = if (enableApplicationInsights) {
  name: take('appinsights-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.applicationInsights
    workspaceResourceId: spoke.outputs.logAnalyticsWorkspaceId
  }
}

module cachePrivateDnsZone 'br/public:avm/res/network/private-dns-zone:0.2.5' = if (deployRedisCache) {
  name: take('redisdnszone-${deployment().name}-deployment', 64)
  scope: hubResourceGroup
  params: {
    name: 'privatelink.redis.cache.windows.net'
    virtualNetworkLinks: [
      {
        registrationEnabled: false
        virtualNetworkResourceId: spoke.outputs.spokeVNetId
      }
    ]
  }
}

module redis 'br/public:avm/res/cache/redis:0.3.2' = if (deployRedisCache) {
  name: take('redis-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.redisCache
    location: location
    enableNonSslPort: false
    minimumTlsVersion: '1.2'
    redisVersion: '6'
    capacity: 0
    skuName: 'Basic'
    publicNetworkAccess: 'Disabled'
    privateEndpoints: [
      {
        subnetResourceId: spoke.outputs.spokePrivateEndpointsSubnetId
        privateDnsZoneGroupName: cachePrivateDnsZone.outputs.name
        privateDnsZoneResourceIds: [
          cachePrivateDnsZone.outputs.resourceId
        ]
        name: naming.outputs.resourcesNames.redisCachePep
      }
    ]
  }
}

module kvPrivateDnsZone 'br/public:avm/res/network/private-dns-zone:0.2.5' = {
  name: take('kvdnszone-${deployment().name}-deployment', 64)
  scope: hubResourceGroup
  params: {
    name: 'privatelink.vaultcore.azure.net'
    virtualNetworkLinks: [
      {
        registrationEnabled: false
        virtualNetworkResourceId: spoke.outputs.spokeVNetId
      }
    ]
  }
}

module keyvault 'br/public:avm/res/key-vault/vault:0.5.1' = {
  name: take('keyvault-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.keyVault
    location: location
    sku: 'standard'
    enablePurgeProtection: false
    softDeleteRetentionInDays: 7
    enableVaultForTemplateDeployment: false
    enableVaultForDeployment: false
    enableVaultForDiskEncryption: false
    enableRbacAuthorization: true
    privateEndpoints: [
      {
        subnetResourceId: spoke.outputs.spokePrivateEndpointsSubnetId
        privateDnsZoneGroupName: kvPrivateDnsZone.outputs.name
        privateDnsZoneResourceIds: [
          kvPrivateDnsZone.outputs.resourceId
        ]
        name: naming.outputs.resourcesNames.keyVaultPep
      }
    ]
    diagnosticSettings: [
      {
        workspaceResourceId: spoke.outputs.logAnalyticsWorkspaceId
      }
    ]
    roleAssignments: [
      {
        principalId: aks.outputs.aksUMIPrincipalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'Key Vault Secrets User'
      }
    ]
  }
}

// Switch to Premium SKU for Private Endpoints
module registry 'br/public:avm/res/container-registry/registry:0.1.1' = if (deployAcr) {
  name: take('acr-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.containerRegistry
    acrAdminUserEnabled: false
    acrSku: 'Basic'
    diagnosticSettings: [
      {
        workspaceResourceId: spoke.outputs.logAnalyticsWorkspaceId
      }
    ]
    roleAssignments: [
      {
        principalId: aks.outputs.aksUMIPrincipalId
        principalType: 'ServicePrincipal'
        roleDefinitionIdOrName: 'AcrPull'
      }
    ]
    location: location
    softDeletePolicyDays: 7
    softDeletePolicyStatus: 'disabled'
    tags: {
      Environment: 'Non-Prod'
      Role: 'DeploymentValidation'
    }
  }
}

// ------------------
// PARAMETERS - AKS
// ------------------

param kubernetesVersion string
param aadGroupdIds array

// ------------------
// VARIABLES - AKS
// ------------------

// ------------------
// RESOURCES - AKS
// ------------------

module aks 'modules/04-aks-environment/deploy.aks.bicep' = {
  name: take('aksEnvironment-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    aadGroupdIds: aadGroupdIds
    autoScalingProfile: {}
    availabilityZones: []
    clusterName: naming.outputs.resourcesNames.aks
    enableAutoScaling: true
    kubernetesVersion: kubernetesVersion
    location: location
    logworkspaceid: spoke.outputs.logAnalyticsWorkspaceId
    networkPlugin: 'azure'
    subnetId: spoke.outputs.spokeInfraSubnetId
    useRouteTable: (!empty(hub.outputs.networkApplianceIpAddress)) ? true : false
    enablePrivateCluster: false
  }
}

// ------------------
// PARAMETERS - APGW FOR CONTAINERS
// ------------------

// ------------------
// VARIABLES - APGW FOR CONTAINERS
// ------------------

// ------------------
// RESOURCES - APGW FOR CONTAINERS
// ------------------

module agw4c 'modules/06-application-gateway/deploy.appgw-container.bicep' = {
  name: take('agw4c-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    location: location
    name: naming.outputs.resourcesNames.agw4c
  }
}

// ------------------
// PARAMETERS - PROMETHEUS
// ------------------

// ------------------
// VARIABLES - PROMETHEUS
// ------------------

// ------------------
// RESOURCES - PROMETHEUS
// ------------------

module prometheus 'modules//05-monitoring/deploy.prometheus.bicep' = {
  name: take('prometheus-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    location: location
    clusterName: naming.outputs.resourcesNames.aks    
    publicNetworkAccess: 'Enabled'
    name: naming.outputs.resourcesNames.prometheus
    tags: tags
  }
}

// ------------------
// PARAMETERS - GRAFANA
// ------------------

// ------------------
// VARIABLES - GRAFANA
// ------------------

// ------------------
// RESOURCES - GRAFANA
// ------------------

module grafana 'modules//05-monitoring/deploy.grafana.bicep' = {
  name: take('grafana-${deployment().name}-deployment', 64)
  scope: spokeResourceGroup
  params: {
    name: naming.outputs.resourcesNames.grafana
    prometheusName: naming.outputs.resourcesNames.prometheus
    tags: tags
    skuName: 'Essential'
    // Add an Entra Group to allow access to Grafana
    //userId: xxx
  }
}
